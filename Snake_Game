Để lập trình một trò chơi con rắn trên LED matrix 8x8 bằng MAX7219 sử dụng Raspberry Pi, bạn cần thực hiện các bước sau:

Bước 1: Chuẩn bị phần cứng

    Kết nối LED matrix 8x8 với MAX7219 theo sơ đồ mạch.
    Kết nối MAX7219 với Raspberry Pi.
    Cài đặt thư viện wiringPi để điều khiển GPIO trên Raspberry Pi.

Bước 2: Tạo ma trận đại diện cho màn hình LED matrix

    Sử dụng mảng 2 chiều để biểu diễn ma trận LED matrix. Với mỗi ô trong ma trận, giá trị 0 thể hiện ô tắt, giá trị 1 thể hiện ô sáng.
    Sử dụng hàm wiringPiSPIDataRW để gửi dữ liệu ma trận LED matrix qua MAX7219 và hiển thị lên màn hình.

Bước 3: Thiết kế và lập trình trò chơi con rắn

    Xác định kích thước của con rắn và vị trí ban đầu của nó trên màn hình.
    Sử dụng các phím điều khiển để di chuyển con rắn và thêm phần ăn.
    Cập nhật ma trận LED matrix để hiển thị con rắn và phần ăn.
    Kiểm tra các điều kiện thắng và thua của trò chơi và hiển thị thông báo tương ứng trên màn hình.

Đây là một phương pháp để lập trình trò chơi con rắn trên LED matrix 8x8 bằng MAX7219 sử dụng Raspberry Pi. Tuy nhiên, quá trình này có thể đòi hỏi kiến thức kỹ thuật và kinh nghiệm lập trình, vì vậy bạn cần phải tìm hiểu thêm trước khi thực hiện.
//========================================================================================================================================================================================================
#include <wiringPi.h>
#include <wiringPiSPI.h>

#define CS 10 // Pin chip select của MAX7219
#define CLK 11 // Pin clock của MAX7219
#define DIN 12 // Pin data in của MAX7219

// Khai báo ma trận LED matrix
unsigned char led_matrix[8][8] = {0};

// Khai báo biến để lưu trạng thái của con rắn
int snake_x[64] = {0};
int snake_y[64] = {0};
int snake_length = 3;
int snake_direction = 0; // 0: phải, 1: xuống, 2: trái, 3: lên

// Khai báo biến để lưu vị trí phần ăn
int food_x = 0;
int food_y = 0;

// Hàm hiển thị ma trận LED matrix lên màn hình
void display_led_matrix(unsigned char matrix[8][8]) {
  unsigned char row, col, data;
  for (row = 0; row < 8; row++) {
    digitalWrite(CS, LOW);
    for (col = 8; col > 0; col--) {
      data = matrix[row][col - 1];
      wiringPiSPIDataRW(0, &data, 1);
    }
    digitalWrite(CS, HIGH);
    digitalWrite(CLK, HIGH);
    digitalWrite(CLK, LOW);
  }
}

// Hàm tạo phần ăn ngẫu nhiên trên màn hình
void generate_food() {
  food_x = rand() % 8;
  food_y = rand() % 8;
  led_matrix[food_y][food_x] = 1;
}

int main(void) {
  // Khởi tạo GPIO và SPI trên Raspberry Pi
  wiringPiSetup();
  pinMode(CS, OUTPUT);
  pinMode(CLK, OUTPUT);
  pinMode(DIN, OUTPUT);
  wiringPiSPISetup(0, 10000000); // Tốc độ truyền dữ liệu 10MHz

  // Tạo ma trận LED matrix ban đầu
  int i, j;
  for (i = 0; i < 8; i++) {
    for (j = 0; j < 8; j++) {
      led_matrix[i][j] = 0;
    }
  }

  // Tạo con rắn ban đầu
  snake_x[0] = 2;
  snake_y[0] = 0;
  snake_x[1] = 1;
  snake_y[1] = 0;
  snake_x[2] = 0;
  snake_y[2] = 0;

  // Tạo phần ăn ban đầu
  generate_food();

  // Vòng lặp chính của trò chơi
  while (1) {
    // Di chuyển con rắn
    for (i = snake_length - 1; i > 0; i--) {
      snake_x[i] = snake_x[i - 1];
      snake_y[i] = snake_y[i - 1];
      }
switch (snake_direction) {
  case 0: // Di chuyển sang phải
    snake_x[0]++;
    break;
  case 1: // Di chuyển xuống dưới
    snake_y[0]++;
    break;
  case 2: // Di chuyển sang trái
    snake_x[0]--;
    break;
  case 3: // Di chuyển lên trên
    snake_y[0]--;
    break;
}

// Kiểm tra xem con rắn có ăn phần ăn hay không
if (snake_x[0] == food_x && snake_y[0] == food_y) {
  snake_length++;
  generate_food();
}

// Kiểm tra xem con rắn có va chạm vào tường hoặc vào chính mình hay không
if (snake_x[0] < 0 || snake_x[0] >= 8 || snake_y[0] < 0 || snake_y[0] >= 8) {
  // Nếu con rắn va chạm vào tường, kết thúc trò chơi
  break;
}
for (i = 1; i < snake_length; i++) {
  if (snake_x[0] == snake_x[i] && snake_y[0] == snake_y[i]) {
    // Nếu con rắn va chạm vào chính mình, kết thúc trò chơi
    break;
  }
}
if (i < snake_length) {
  break;
}

// Cập nhật ma trận LED matrix
for (i = 0; i < 8; i++) {
  for (j = 0; j < 8; j++) {
    led_matrix[i][j] = 0;
  }
}
led_matrix[food_y][food_x] = 1;
for (i = 0; i < snake_length; i++) {
  led_matrix[snake_y[i]][snake_x[i]] = 1;
}

// Hiển thị ma trận LED matrix lên màn hình
display_led_matrix(led_matrix);

// Ngừng chương trình trong 100ms để tạo hiệu ứng di chuyển
delay(100);

}

// Kết thúc trò chơi
return 0;
}
//=====================================================================================================================================================================================================
#include <stdio.h>
#include <stdlib.h>
#include <wiringPi.h>

#define MAX7219_DIN 12
#define MAX7219_CS 10
#define MAX7219_CLK 14

#define BT1 0
#define BT2 2
#define BT3 3
#define BT4 4

int led_matrix[8][8] = {0};
int snake_x[64] = {0};
int snake_y[64] = {0};
int snake_length = 1;
int snake_direction = 0; // 0: right, 1: down, 2: left, 3: up
int food_x = 0;
int food_y = 0;

void setup() {
  wiringPiSetup();
  pinMode(BT1, INPUT);
  pinMode(BT2, INPUT);
  pinMode(BT3, INPUT);
  pinMode(BT4, INPUT);
  pinMode(MAX7219_DIN, OUTPUT);
  pinMode(MAX7219_CS, OUTPUT);
  pinMode(MAX7219_CLK, OUTPUT);
  digitalWrite(MAX7219_CS, HIGH);
}

void shift_out(int data_pin, int clock_pin, int value) {
  int i;
  for (i = 7; i >= 0; i--) {
    digitalWrite(clock_pin, LOW);
    digitalWrite(data_pin, (value >> i) & 1);
    digitalWrite(clock_pin, HIGH);
  }
}

void send_byte(int data) {
  digitalWrite(MAX7219_CS, LOW);
  shift_out(MAX7219_DIN, MAX7219_CLK, data);
  digitalWrite(MAX7219_CS, HIGH);
}

void send_cmd(int cmd, int data) {
  send_byte(cmd);
  send_byte(data);
}

void display_led_matrix(int led_matrix[][8]) {
  int i, j;
  for (i = 0; i < 8; i++) {
    send_cmd(i + 1, 0);
    for (j = 0; j < 8; j++) {
      send_cmd(j + 1, led_matrix[i][j]);
    }
  }
}

void generate_food() {
  food_x = rand() % 8;
  food_y = rand() % 8;
}

void update_snake() {
int i;
for (i = snake_length - 1; i > 0; i--) {
snake_x[i] = snake_x[i - 1];
snake_y[i] = snake_y[i - 1];
}
switch (snake_direction) {
case 0: // right
snake_x[0]++;
break;
case 1: // down
snake_y[0]++;
break;
case 2: // left
snake_x[0]--;
break;
case 3: // up
snake_y[0]--;
break;
}
if (snake_x[0] == food_x && snake_y[0] == food_y) {
snake_length++;
generate_food();
}
}

void update_led_matrix() {
int i, j;
for (i = 0; i < 8; i++) {
for (j = 0; j < 8; j++) {
led_matrix[i][j] = 0;
}
}
for (i = 0; i < snake_length; i++) {
led_matrix[snake_y[i]][snake_x[i]] = 1;
}
led_matrix[food_y][food_x] = 1;
display_led_matrix(led_matrix);
}

int read_button(int button_pin) {
int value = digitalRead(button_pin);
while (value == digitalRead(button_pin));
return value;
}

void loop() {
int bt1 = read_button(BT1);
int bt2 = read_button(BT2);
int bt3 = read_button(BT3);
int bt4 = read_button(BT4);
if (bt1) {
if (snake_direction != 2) snake_direction = 0; // right
}
if (bt2) {
if (snake_direction != 3) snake_direction = 1; // down
}
if (bt3) {
if (snake_direction != 0) snake_direction = 2; // left
}
if (bt4) {
if (snake_direction != 1) snake_direction = 3; // up
}
update_snake();
update_led_matrix();
delay(500);
}

int main() {
setup();
generate_food();
while (1) {
loop();
}
return 0;
}
Ở đây, chúng ta đã thêm hàm `read_button()` để đọc trạng thái của các nút nhấn và sử dụng chúng để điều khiển hướng di chuyển của con rắn trong trò chơi. Nếu nút nhấn được nhấn, chúng ta thay đổi hướng di chuyển của con rắn tương ứng và cập nhật lại màn hình hiển thị.

Với trò chơi này, chúng ta sử dụng một chế độ chơi đơn giản, trong đó con rắn di chuyển với tốc độ cố định và người chơi chỉ có thể điều khiển hướng di chuyển của nó. Tuy nhiên, bạn có thể mở rộng trò chơi bằng cách thêm các tính năng khác như: tốc độ di


